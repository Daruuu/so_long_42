valgrind with GDB:
    valgrin --vgdb-error=0 ./so_long
check the line:
    target remote
in other terminal:
    gcc so_long.c -g -o so_long
    gdb so_long
    target remote | /usr/bin/vgdb --pid=xxxx


    #include <fcntl.h>

// Prototipos de funciones adicionales (asumiendo que existen en tu proyecto)
char    *get_next_line(int fd);
void    ft_printf(const char *format, ...);
size_t  ft_strlen(const char *str);

char **get_map_from_file(char **av, int *num_lines)
{
    int     fd;
    char    *line;
    char    **map;
    int     lines_allocated;
    int     i;

    *num_lines = 0;
    lines_allocated = 10;  // Asignar espacio inicialmente para 10 lÃ­neas
    map = (char **)malloc(lines_allocated * sizeof(char *));
    if (!map)
    {
        ft_printf("Error: Memory allocation failed\n");
        return NULL;
    }

    fd = open(av[1], O_RDONLY);
    if (fd == -1)
    {
        ft_printf("Error: could not open file %s\n", av[1]);
        free(map);
        return NULL;
    }

    while ((line = get_next_line(fd)) != NULL)
    {
        if (*num_lines >= lines_allocated)
        {
            // Redimensionar el array si es necesario
            lines_allocated *= 2;
            char **new_map = (char **)realloc(map, lines_allocated * sizeof(char *));
            if (!new_map)
            {
                ft_printf("Error: Memory reallocation failed\n");
                free(line);
                for (i = 0; i < *num_lines; i++)
                    free(map[i]);
                free(map);
                close(fd);
                return NULL;
            }
            map = new_map;
        }
        map[*num_lines] = line;
        (*num_lines)++;
    }
    close(fd);
    return map;
}

void free_map(char **map, int num_lines)
{
    for (int i = 0; i < num_lines; i++)
        free(map[i]);
    free(map);
}

int main(int argc, char **argv)
{
    if (argc != 2)
    {
        ft_printf("Usage: %s <map_file>\n", argv[0]);
        return 1;
    }

    int num_lines;
    char **map = get_map_from_file(argv, &num_lines);
    if (!map)
        return 1;

    for (int i = 0; i < num_lines; i++)
        ft_printf("MAP: %s\n", map[i]);

    ft_printf("Total lines: %d\n", num_lines);
    free_map(map, num_lines);

    return 0;
}
